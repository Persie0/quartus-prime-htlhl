# Reading pref.tcl
# do tb_BinTo7SegV2.do
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 2020.1 Lib Mapping Utility 2020.02 Feb 28 2020
# vmap work rtl_work 
# Modifying modelsim.ini
# 
# 
# Name of test bench entity
# set TestBench "tb_BinTo7SegV2"
# tb_BinTo7SegV2
# 
# Add 
# vcom -93 -work work {BinTo7SegV2.vhd}
# Model Technology ModelSim - Intel FPGA Edition vcom 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 17:17:01 on Dec 21,2020
# vcom -reportprogress 300 -93 -work work BinTo7SegV2.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity BinTo7SegV2
# -- Compiling architecture BinTo7Seg_archV2 of BinTo7SegV2
# End time: 17:17:01 on Dec 21,2020, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vcom -93 -work work {tb_BinTo7SegV2.vhd}
# Model Technology ModelSim - Intel FPGA Edition vcom 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 17:17:01 on Dec 21,2020
# vcom -reportprogress 300 -93 -work work tb_BinTo7SegV2.vhd 
# -- Loading package STANDARD
# -- Loading package TEXTIO
# -- Loading package std_logic_1164
# -- Compiling entity tb_BinTo7SegV2
# -- Compiling architecture tb_BinTo7Seg_archV2 of tb_BinTo7SegV2
# End time: 17:17:02 on Dec 21,2020, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# 
# vsim -t 1ps -L altera -L lpm -L sgate -L altera_mf -L altera_lnsim -L fiftyfivenm -L rtl_work -L work -voptargs="+acc"  $TestBench
# vsim -t 1ps -L altera -L lpm -L sgate -L altera_mf -L altera_lnsim -L fiftyfivenm -L rtl_work -L work -voptargs=""+acc"" tb_BinTo7SegV2 
# Start time: 17:17:02 on Dec 21,2020
# Loading std.standard
# Loading std.textio(body)
# Loading ieee.std_logic_1164(body)
# Loading work.tb_binto7segv2(tb_binto7seg_archv2)
# Loading work.binto7segv2(binto7seg_archv2)
# 
# Kombiniertes Signal 'Inputs' erstellen 
# virtual signal {b3 & b2 & b1 & b0} Inputs 
# /tb_binto7segv2/Inputs
#  
# Kombiniertes Signal in Binärkodierung und in Hex- 
# Kodierung anzeigen 
# add wave -label "InputsBin" Inputs 
# add wave -radix hexadecimal -label "InputsHex" Inputs 
#  
# add wave -label "b3" b3 
# add wave -label "b2" b2 
# add wave -label "b1" b1 
# add wave -label "b0" b0 
#  
# Trennstrich mit Bezeichnung einfügen 
# add wave -divider Ausgaenge: 
#  
# Kombiniertes Signal 'Segments' erstellen 
# virtual signal {a & b & c & d & e & f & g} Segments 
# /tb_binto7segv2/Segments
#  
# Kombiniertes Signal in Binärkodierung anzeigen 
# add wave -label "Segments" Segments 
#  
# add wave -label "a" a 
# add wave -label "b" b 
# add wave -label "c" c 
# add wave -label "d" d 
# add wave -label "e" e 
# add wave -label "f" f 
# add wave -label "g" g 
# 
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# run 340 ns
# 
# wave zoom full
# 0 ps
# 357 ns
# End time: 17:17:26 on Dec 21,2020, Elapsed time: 0:00:24
# Errors: 0, Warnings: 0
